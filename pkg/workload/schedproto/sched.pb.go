//
// Set up:
// $ go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
// $ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1
//
// Add `<GOPATH>/bin` to your $PATH:
// OR (!suboptimal since it overwrites $PATH by appending an additional
// line as opposed to change it directly)
// $ echo "export PATH=$PATH:$(go env GOPATH)/bin" >> ~/.profile
// $ source ~/.profile
// OR temporarily
// $ export PATH="$PATH:$(go env GOPATH)/bin"

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: sched.proto

package schedproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SchedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedAlg          string `protobuf:"bytes,1,opt,name=schedAlg,proto3" json:"schedAlg,omitempty"`
	InvocationName    string `protobuf:"bytes,2,opt,name=invocationName,proto3" json:"invocationName,omitempty"`        // Text message field.
	Batchsize         uint32 `protobuf:"varint,3,opt,name=batchsize,proto3" json:"batchsize,omitempty"`                 // batch size
	RuntimeInMilliSec uint32 `protobuf:"varint,4,opt,name=runtimeInMilliSec,proto3" json:"runtimeInMilliSec,omitempty"` // Execution runtime [ms].
	Iterations        uint32 `protobuf:"varint,5,opt,name=iterations,proto3" json:"iterations,omitempty"`               // remaining iterations
	Deadline          int32  `protobuf:"varint,6,opt,name=deadline,proto3" json:"deadline,omitempty"`                   // deadline
	PrevReplica       uint32 `protobuf:"varint,7,opt,name=prevReplica,proto3" json:"prevReplica,omitempty"`             // prevReplica
	AvailableGPU      uint32 `protobuf:"varint,8,opt,name=availableGPU,proto3" json:"availableGPU,omitempty"`           // avaliable number of GPUs
}

func (x *SchedRequest) Reset() {
	*x = SchedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sched_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedRequest) ProtoMessage() {}

func (x *SchedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sched_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedRequest.ProtoReflect.Descriptor instead.
func (*SchedRequest) Descriptor() ([]byte, []int) {
	return file_sched_proto_rawDescGZIP(), []int{0}
}

func (x *SchedRequest) GetSchedAlg() string {
	if x != nil {
		return x.SchedAlg
	}
	return ""
}

func (x *SchedRequest) GetInvocationName() string {
	if x != nil {
		return x.InvocationName
	}
	return ""
}

func (x *SchedRequest) GetBatchsize() uint32 {
	if x != nil {
		return x.Batchsize
	}
	return 0
}

func (x *SchedRequest) GetRuntimeInMilliSec() uint32 {
	if x != nil {
		return x.RuntimeInMilliSec
	}
	return 0
}

func (x *SchedRequest) GetIterations() uint32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *SchedRequest) GetDeadline() int32 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *SchedRequest) GetPrevReplica() uint32 {
	if x != nil {
		return x.PrevReplica
	}
	return 0
}

func (x *SchedRequest) GetAvailableGPU() uint32 {
	if x != nil {
		return x.AvailableGPU
	}
	return 0
}

type SchedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvocationName []string `protobuf:"bytes,1,rep,name=invocationName,proto3" json:"invocationName,omitempty"`
	Replica        []uint32 `protobuf:"varint,2,rep,packed,name=replica,proto3" json:"replica,omitempty"`      // The number of allocated GPUs
	SchedOverhead  uint32   `protobuf:"varint,3,opt,name=schedOverhead,proto3" json:"schedOverhead,omitempty"` // scheduling overhead
}

func (x *SchedReply) Reset() {
	*x = SchedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sched_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedReply) ProtoMessage() {}

func (x *SchedReply) ProtoReflect() protoreflect.Message {
	mi := &file_sched_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedReply.ProtoReflect.Descriptor instead.
func (*SchedReply) Descriptor() ([]byte, []int) {
	return file_sched_proto_rawDescGZIP(), []int{1}
}

func (x *SchedReply) GetInvocationName() []string {
	if x != nil {
		return x.InvocationName
	}
	return nil
}

func (x *SchedReply) GetReplica() []uint32 {
	if x != nil {
		return x.Replica
	}
	return nil
}

func (x *SchedReply) GetSchedOverhead() uint32 {
	if x != nil {
		return x.SchedOverhead
	}
	return 0
}

var File_sched_proto protoreflect.FileDescriptor

var file_sched_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x41, 0x6c,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x41, 0x6c,
	0x67, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x53, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x53, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x47, 0x50, 0x55, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x47, 0x50, 0x55, 0x22, 0x74, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x32, 0x7c, 0x0a,
	0x08, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x42, 0x17, 0x5a, 0x15, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sched_proto_rawDescOnce sync.Once
	file_sched_proto_rawDescData = file_sched_proto_rawDesc
)

func file_sched_proto_rawDescGZIP() []byte {
	file_sched_proto_rawDescOnce.Do(func() {
		file_sched_proto_rawDescData = protoimpl.X.CompressGZIP(file_sched_proto_rawDescData)
	})
	return file_sched_proto_rawDescData
}

var file_sched_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sched_proto_goTypes = []interface{}{
	(*SchedRequest)(nil), // 0: sched.SchedRequest
	(*SchedReply)(nil),   // 1: sched.SchedReply
}
var file_sched_proto_depIdxs = []int32{
	0, // 0: sched.Executor.Execute:input_type -> sched.SchedRequest
	0, // 1: sched.Executor.ExecuteStream:input_type -> sched.SchedRequest
	1, // 2: sched.Executor.Execute:output_type -> sched.SchedReply
	1, // 3: sched.Executor.ExecuteStream:output_type -> sched.SchedReply
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sched_proto_init() }
func file_sched_proto_init() {
	if File_sched_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sched_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sched_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sched_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sched_proto_goTypes,
		DependencyIndexes: file_sched_proto_depIdxs,
		MessageInfos:      file_sched_proto_msgTypes,
	}.Build()
	File_sched_proto = out.File
	file_sched_proto_rawDesc = nil
	file_sched_proto_goTypes = nil
	file_sched_proto_depIdxs = nil
}
